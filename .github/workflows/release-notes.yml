name: Generate Release Notes

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

      - name: Generate release notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.repository }}
        run: |
          # Function to fetch PRs by label
          fetch_prs_by_label() {
            local label=$1
            gh pr list \
              --repo "$OWNER/$REPO" \
              --state merged \
              --json number,title,labels,body,mergedAt \
              --search "label:$label merged:${{ steps.get_version.outputs.PREVIOUS_TAG }}..HEAD" \
              --limit 100
          }

          # Start release notes
          {
            echo "# 🚀 Release ${{ steps.get_version.outputs.VERSION }}"
            echo
            echo "## What's Changed"
            echo

            # Features Section
            echo "### ✨ Features & Enhancements"
            echo
            {
              # Fetch feature PRs
              feature_prs=$(fetch_prs_by_label "feature")
              enhancement_prs=$(fetch_prs_by_label "enhancement")
              
              # Combine and format feature PRs
              echo "$feature_prs $enhancement_prs" | \
              jq -r '.[] | "* \(.title) (#\(.number))\n  * \(.body | split("\n")[0] // "")"' || \
              echo "No new features in this release"
            }
            echo

            # Bug Fixes Section
            echo "### 🐛 Bug Fixes"
            echo
            {
              # Fetch bug fix PRs
              bug_prs=$(fetch_prs_by_label "bug")
              bugfix_prs=$(fetch_prs_by_label "bugfix")
              
              # Combine and format bug fix PRs
              echo "$bug_prs $bugfix_prs" | \
              jq -r '.[] | "* \(.title) (#\(.number))\n  * \(.body | split("\n")[0] // "")"' || \
              echo "No bug fixes in this release"
            }
            echo

            # Documentation Section
            echo "### 📚 Documentation"
            echo
            {
              docs_prs=$(fetch_prs_by_label "documentation")
              echo "$docs_prs" | \
              jq -r '.[] | "* \(.title) (#\(.number))"' || \
              echo "No documentation changes in this release"
            }
            echo

            # Other Changes Section
            echo "### 🔄 Other Changes"
            echo
            {
              gh pr list \
                --repo "$OWNER/$REPO" \
                --state merged \
                --json number,title,labels \
                --search "merged:${{ steps.get_version.outputs.PREVIOUS_TAG }}..HEAD -label:feature -label:enhancement -label:bug -label:bugfix -label:documentation" \
                --limit 100 | \
              jq -r '.[] | "* \(.title) (#\(.number))"' || \
              echo "No other changes in this release"
            }
            echo

            # Contributors Section
            echo "## 👥 Contributors"
            echo
            gh pr list \
              --repo "$OWNER/$REPO" \
              --state merged \
              --json author \
              --search "merged:${{ steps.get_version.outputs.PREVIOUS_TAG }}..HEAD" | \
            jq -r '.[] | .author.login' | sort -u | awk '{ print "* @" $0 }'
            echo

            # Full Changelog Link
            echo "**Full Changelog**: https://github.com/$OWNER/$REPO/compare/${{ steps.get_version.outputs.PREVIOUS_TAG }}...${{ steps.get_version.outputs.VERSION }}"
          } > RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: false
