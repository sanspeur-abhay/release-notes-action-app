name: Generate Release Notes 2025

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create release for (e.g., v1.0.0)'
        required: false
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

permissions: {}  # Zero trust by default

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write    # Required for creating releases
      pull-requests: read # Required for fetching PR information
      issues: read      # Required for fetching issue information
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth status || gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          # Validate semantic version
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?(\+[a-zA-Z0-9\.]+)?$ ]]; then
            echo "Error: Version $VERSION does not follow semantic versioning (vX.Y.Z)"
            exit 1
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Get previous version tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '')
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using first commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to fetch PRs by label
          fetch_prs_by_label() {
            local label=$1
            gh pr list \
              --repo "${{ github.repository }}" \
              --state merged \
              --json number,title,body \
              --search "label:$label merged:${{ steps.version.outputs.PREVIOUS_TAG }}..HEAD" \
              --limit 100 2>/dev/null || echo "[]"
          }

          # Function to format PR entries
          format_prs() {
            local prs=$1
            local emoji=$2
            if [ -n "$prs" ] && [ "$prs" != "[]" ]; then
              echo "$prs" | jq -r --arg emoji "$emoji" '.[] | "* \($emoji) \(.title) (#\(.number))"'
            fi
          }

          # Start generating release notes
          {
            echo "# 🚀 Release ${{ steps.version.outputs.VERSION }}"
            echo

            # Features Section
            echo "## ✨ Features & Enhancements"
            echo
            features=$(fetch_prs_by_label "feature")
            enhancements=$(fetch_prs_by_label "enhancement")
            if [ "$features" != "[]" ] || [ "$enhancements" != "[]" ]; then
              format_prs "$features" "✨"
              format_prs "$enhancements" "✨"
            else
              echo "No new features in this release"
            fi
            echo

            # Bug Fixes Section
            echo "## 🐛 Bug Fixes"
            echo
            bugs=$(fetch_prs_by_label "bug")
            bugfixes=$(fetch_prs_by_label "bugfix")
            if [ "$bugs" != "[]" ] || [ "$bugfixes" != "[]" ]; then
              format_prs "$bugs" "🐛"
              format_prs "$bugfixes" "🐛"
            else
              echo "No bug fixes in this release"
            fi
            echo

            # Other Changes Section
            echo "## 🔄 Other Changes"
            echo
            other_prs=$(gh pr list \
              --repo "${{ github.repository }}" \
              --state merged \
              --json number,title \
              --search "merged:${{ steps.version.outputs.PREVIOUS_TAG }}..HEAD -label:feature -label:enhancement -label:bug -label:bugfix" \
              --limit 100 || echo "[]")
            
            if [ "$other_prs" != "[]" ]; then
              echo "$other_prs" | jq -r '.[] | "* \(.title) (#\(.number))"'
            else
              echo "No other changes in this release"
            fi
            echo

            # Full Changelog Link
            echo "---"
            echo "[Full Changelog](https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.PREVIOUS_TAG }}...${{ steps.version.outputs.VERSION }})"

          } > RELEASE_NOTES.md

          # Debug output
          echo "Generated release notes:"
          cat RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: false

      - name: Update Release Documentation
        if: success()
        run: |
          echo "Release ${{ steps.version.outputs.VERSION }} created successfully!"
          echo "View the release at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}"
