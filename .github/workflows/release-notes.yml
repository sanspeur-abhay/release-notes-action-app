name: Generate Release Notes

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases
      pull-requests: read # Required for reading PRs and their labels
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for generating release notes
      
      - name: Get tag name
        id: get_tag
        run: |
          echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Get previous tag
        id: prev_tag
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '')
          echo "tag=$PREV_TAG" >> "$GITHUB_OUTPUT"
      
      - name: Generate release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Initialize the release notes file
          echo "# What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Function to fetch PRs with specific labels
          fetch_prs_by_label() {
            local label=$1
            gh pr list \
              --repo $GITHUB_REPOSITORY \
              --state merged \
              --json number,title,labels,mergedAt \
              --search "label:$label merged:${{ steps.prev_tag.outputs.tag }}..HEAD" \
              --limit 100
          }

          # Features Section
          echo "## ✨ Features" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          {
            # Fetch PRs with feature or enhancement labels
            feature_prs=$(fetch_prs_by_label "feature")
            enhancement_prs=$(fetch_prs_by_label "enhancement")
            
            # Combine and format feature PRs
            echo "$feature_prs $enhancement_prs" | jq -r '.[] | "* \(.title) (#\(.number))"' || true
          } >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Bug Fixes Section
          echo "## 🐛 Bug Fixes" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          {
            # Fetch PRs with bug or fix labels
            bug_prs=$(fetch_prs_by_label "bug")
            fix_prs=$(fetch_prs_by_label "fix")
            
            # Combine and format bug fix PRs
            echo "$bug_prs $fix_prs" | jq -r '.[] | "* \(.title) (#\(.number))"' || true
          } >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Other Changes Section
          echo "## 🔄 Other Changes" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          {
            # Get all merged PRs and exclude those with feature/bug labels
            gh pr list \
              --repo $GITHUB_REPOSITORY \
              --state merged \
              --json number,title,labels,mergedAt \
              --search "merged:${{ steps.prev_tag.outputs.tag }}..HEAD -label:feature -label:enhancement -label:bug -label:fix" \
              --limit 100 | \
            jq -r '.[] | "* \(.title) (#\(.number))"' || true
          } >> RELEASE_NOTES.md

          # Check if any content was added
          if ! grep -q "[*]" RELEASE_NOTES.md; then
            echo "No pull requests found for this release." >> RELEASE_NOTES.md
          fi

          # Add link to full changelog
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/$GITHUB_REPOSITORY/compare/${{ steps.prev_tag.outputs.tag }}...${{ steps.get_tag.outputs.tag }}" >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 